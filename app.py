import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, date, timedelta
import json
import csv
import io
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="üè• Asistente Geri√°trico IA",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado completo
st.markdown("""
<style>
/* Variables CSS para colores del tema m√©dico */
:root {
    --primary-color: #2E8B57;
    --secondary-color: #4682B4;
    --accent-color: #20B2AA;
    --warning-color: #FF6347;
    --success-color: #32CD32;
    --info-color: #87CEEB;
}

.main-header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.patient-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    border-left: 4px solid var(--primary-color);
    margin: 1rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
}

.patient-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.metric-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-left: 4px solid var(--primary-color);
    margin: 0.5rem 0;
}

.risk-alto { 
    border-left-color: #dc3545 !important;
    background: linear-gradient(135deg, #dc354510, #dc354505);
}
.risk-medio { 
    border-left-color: #ffc107 !important;
    background: linear-gradient(135deg, #ffc10710, #ffc10705);
}
.risk-bajo { 
    border-left-color: #28a745 !important;
    background: linear-gradient(135deg, #28a74510, #28a74505);
}

.alert-critical {
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
    padding: 1rem;
    border-radius: 8px;
    margin: 0.5rem 0;
    border-left: 4px solid #dc3545;
}

.alert-warning {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    color: #856404;
    padding: 1rem;
    border-radius: 8px;
    margin: 0.5rem 0;
    border-left: 4px solid #ffc107;
}

.alert-success {
    background: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
    padding: 1rem;
    border-radius: 8px;
    margin: 0.5rem 0;
    border-left: 4px solid #28a745;
}

.evaluation-summary {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    margin: 1rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.protocol-card {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #dc3545;
    margin: 0.5rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Responsive design */
@media (max-width: 768px) {
    .main-header h1 {
        font-size: 1.8rem;
    }
    .patient-card, .metric-card {
        padding: 1rem;
    }
}
</style>
""", unsafe_allow_html=True)

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Encabezado principal
    st.markdown("""
    <div class="main-header">
        <h1>üè• Asistente Geri√°trico con Inteligencia Artificial</h1>
        <p>Sistema integral de apoyo para cuidadores en residencias geri√°tricas</p>
        <small>Basado en gu√≠as cl√≠nicas espa√±olas ‚Ä¢ Versi√≥n 1.0</small>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar estado de la sesi√≥n
    initialize_session_state()
    
    # Sidebar con navegaci√≥n y m√©tricas
    with st.sidebar:
        show_sidebar()
    
    # Navegaci√≥n principal
    page = st.session_state.get('current_page', 'üìä Dashboard')
    
    # Contenido principal basado en la p√°gina seleccionada
    if page == "üìä Dashboard":
        show_dashboard()
    elif page == "üë§ Nuevo Paciente":
        show_new_patient()
    elif page == "üìã Evaluaci√≥n":
        show_evaluation()
    elif page == "üíä Medicamentos":
        show_medications()
    elif page == "üèÉ‚Äç‚ôÇÔ∏è Fisioterapia":
        show_physiotherapy()
    elif page == "üìä Reportes":
        show_reports()
    elif page == "üö® Protocolos":
        show_emergency_protocols()
    elif page == "‚öôÔ∏è Configuraci√≥n":
        show_settings()

def initialize_session_state():
    """Inicializa el estado de la sesi√≥n"""
    if 'patients' not in st.session_state:
        st.session_state.patients = {}
    if 'evaluations' not in st.session_state:
        st.session_state.evaluations = []
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'üìä Dashboard'

def show_sidebar():
    """Muestra la barra lateral con navegaci√≥n y m√©tricas"""
    st.markdown("### üìã Panel de Control")
    
    # Navegaci√≥n principal
    pages = [
        "üìä Dashboard",
        "üë§ Nuevo Paciente", 
        "üìã Evaluaci√≥n",
        "üíä Medicamentos",
        "üèÉ‚Äç‚ôÇÔ∏è Fisioterapia",
        "üìä Reportes",
        "üö® Protocolos",
        "‚öôÔ∏è Configuraci√≥n"
    ]
    
    selected_page = st.selectbox("Navegaci√≥n:", pages, 
                                index=pages.index(st.session_state.current_page))
    st.session_state.current_page = selected_page
    
    st.markdown("---")
    
    # M√©tricas r√°pidas
    st.markdown("### üìà Resumen R√°pido")
    
    total_patients = len(st.session_state.patients)
    total_evaluations = len(st.session_state.evaluations)
    today_evaluations = sum(1 for e in st.session_state.evaluations 
                           if e.get('date') == str(date.today()))
    
    high_risk_count = sum(1 for p in st.session_state.patients.values() 
                         if p.get('risk_level') == 'Alto')
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("üë• Pacientes", total_patients)
        st.metric("üìã Evaluaciones", total_evaluations)
    with col2:
        st.metric("‚ö†Ô∏è Riesgo Alto", high_risk_count)
        st.metric("üìÖ Hoy", today_evaluations)
    
    # Bot√≥n de emergencia
    st.markdown("---")
    if st.button("üö® EMERGENCIA", use_container_width=True, type="primary"):
        st.error("üö® **PROTOCOLO DE EMERGENCIA ACTIVADO**")
        st.error("üìû **Contactar inmediatamente:**")
        st.error("‚Ä¢ **112** - Emergencias generales")
        st.error("‚Ä¢ **061** - Urgencias sanitarias")
        st.session_state.current_page = "üö® Protocolos"
        st.rerun()

def show_dashboard():
    """P√°gina principal del dashboard"""
    st.markdown("## üìä Dashboard Principal")
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    total_patients = len(st.session_state.patients)
    high_risk_patients = sum(1 for p in st.session_state.patients.values() 
                           if p.get('risk_level') == 'Alto')
    total_evaluations = len(st.session_state.evaluations)
    avg_age = (sum(p['age'] for p in st.session_state.patients.values()) / total_patients 
              if total_patients > 0 else 0)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3 style="color: var(--primary-color); margin: 0;">üë• Total Pacientes</h3>
            <h1 style="margin: 0.5rem 0;">{}</h1>
        </div>
        """.format(total_patients), unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card risk-alto">
            <h3 style="color: #dc3545; margin: 0;">‚ö†Ô∏è Riesgo Alto</h3>
            <h1 style="margin: 0.5rem 0;">{}</h1>
        </div>
        """.format(high_risk_patients), unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3 style="color: var(--info-color); margin: 0;">üìã Evaluaciones</h3>
            <h1 style="margin: 0.5rem 0;">{}</h1>
        </div>
        """.format(total_evaluations), unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <h3 style="color: var(--warning-color); margin: 0;">üìÖ Edad Media</h3>
            <h1 style="margin: 0.5rem 0;">{}</h1>
        </div>
        """.format(f"{avg_age:.0f} a√±os" if avg_age > 0 else "N/A"), unsafe_allow_html=True)
    
    if st.session_state.patients:
        # Distribuci√≥n por riesgo
        st.markdown("### üìä Distribuci√≥n por Nivel de Riesgo")
        
        risk_counts = {'Alto': 0, 'Medio': 0, 'Bajo': 0}
        for patient in st.session_state.patients.values():
            risk_level = patient.get('risk_level', 'Medio')
            risk_counts[risk_level] += 1
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card risk-alto">
                <h2 style="margin: 0; color: #dc3545;">{risk_counts['Alto']}</h2>
                <p style="margin: 0;">Riesgo Alto</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card risk-medio">
                <h2 style="margin: 0; color: #ffc107;">{risk_counts['Medio']}</h2>
                <p style="margin: 0;">Riesgo Medio</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card risk-bajo">
                <h2 style="margin: 0; color: #28a745;">{risk_counts['Bajo']}</h2>
                <p style="margin: 0;">Riesgo Bajo</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°fico de evaluaciones recientes
        if st.session_state.evaluations:
            st.markdown("### üìà Evaluaciones de los √öltimos 7 D√≠as")
            
            # Preparar datos para el gr√°fico
            last_7_days = [(date.today() - timedelta(days=i)).strftime('%Y-%m-%d') 
                          for i in range(6, -1, -1)]
            
            daily_counts = []
            for day in last_7_days:
                count = sum(1 for e in st.session_state.evaluations if e.get('date') == day)
                daily_counts.append(count)
            
            chart_data = pd.DataFrame({
                'Fecha': [datetime.strptime(d, '%Y-%m-%d').strftime('%d/%m') for d in last_7_days],
                'Evaluaciones': daily_counts
            })
            
            st.line_chart(chart_data.set_index('Fecha'))
        
        # Lista de pacientes
        st.markdown("### üë• Pacientes Registrados")
        
        for pid, patient in st.session_state.patients.items():
            risk_class = f"risk-{patient.get('risk_level', 'medio').lower()}"
            
            # Calcular d√≠as desde ingreso
            try:
                admission_date = datetime.strptime(patient.get('admission_date', str(date.today())), '%Y-%m-%d').date()
                days_since = (date.today() - admission_date).days
            except:
                days_since = 0
            
            # √öltima evaluaci√≥n
            patient_evaluations = [e for e in st.session_state.evaluations if e.get('patient_id') == pid]
            last_eval = "Sin evaluaciones" if not patient_evaluations else f"√öltima: {patient_evaluations[-1].get('date', 'N/A')}"
            
            st.markdown(f"""
            <div class="patient-card {risk_class}">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <h3 style="margin: 0; color: var(--primary-color);">üë§ {patient['name']}</h3>
                        <p style="margin: 0.5rem 0; color: #666;">
                            <strong>Edad:</strong> {patient['age']} a√±os | 
                            <strong>Habitaci√≥n:</strong> {patient['room']} |
                            <strong>Ingreso:</strong> hace {days_since} d√≠as
                        </p>
                        <p style="margin: 0; color: #888; font-size: 0.9rem;">{last_eval}</p>
                    </div>
                    <div style="text-align: right;">
                        <span style="
                            background: {'#dc3545' if patient.get('risk_level') == 'Alto' else '#ffc107' if patient.get('risk_level') == 'Medio' else '#28a745'};
                            color: white;
                            padding: 0.25rem 0.75rem;
                            border-radius: 20px;
                            font-size: 0.8rem;
                            font-weight: bold;
                        ">
                            {patient.get('risk_level', 'Medio')}
                        </span>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="alert-success">
            <h3>üëã ¬°Bienvenido al Asistente Geri√°trico!</h3>
            <p>Para comenzar:</p>
            <ul>
                <li>üìù <strong>Registra tu primer paciente</strong> en la secci√≥n "Nuevo Paciente"</li>
                <li>üìã <strong>Realiza evaluaciones</strong> diarias para monitoreo continuo</li>
                <li>üìä <strong>Consulta reportes</strong> para an√°lisis de tendencias</li>
            </ul>
            <p><em>El sistema generar√° autom√°ticamente reportes CSV con cada evaluaci√≥n.</em></p>
        </div>
        """, unsafe_allow_html=True)

def show_new_patient():
    """P√°gina para registrar nuevo paciente"""
    st.markdown("## üë§ Registro de Nuevo Paciente")
    
    with st.form("new_patient_form"):
        st.markdown("### üìù Informaci√≥n B√°sica")
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Nombre Completo *", placeholder="Ej: Mar√≠a Garc√≠a L√≥pez")
            age = st.number_input("Edad *", min_value=60, max_value=110, value=75)
            gender = st.selectbox("G√©nero *", ["Femenino", "Masculino", "Otro"])
            room = st.text_input("Habitaci√≥n", placeholder="Ej: 101-A")
        
        with col2:
            admission_date = st.date_input("Fecha de Ingreso", value=date.today())
            emergency_contact = st.text_input("Contacto de Emergencia", 
                                            placeholder="Nombre y tel√©fono")
            risk_level = st.selectbox("Nivel de Riesgo Inicial", ["Bajo", "Medio", "Alto"])
            cognitive_level = st.selectbox("Nivel Cognitivo", 
                                         ["Normal", "Deterioro Leve", "Deterioro Moderado", "Deterioro Severo"])
        
        st.markdown("### üè• Informaci√≥n M√©dica")
        col1, col2 = st.columns(2)
        
        with col1:
            allergies = st.text_area("Alergias Conocidas", 
                                   placeholder="Medicamentos, alimentos, etc.")
            medical_history = st.text_area("Historial M√©dico Relevante",
                                         placeholder="Enfermedades previas, cirug√≠as, etc.")
        
        with col2:
            st.markdown("**Condiciones M√©dicas Actuales:**")
            diabetes = st.checkbox("Diabetes")
            hypertension = st.checkbox("Hipertensi√≥n")
            heart_disease = st.checkbox("Enfermedad Card√≠aca")
            dementia = st.checkbox("Demencia/Alzheimer")
            depression = st.checkbox("Depresi√≥n")
            mobility_issues = st.checkbox("Problemas de Movilidad")
        
        st.markdown("### üíä Medicaci√≥n Actual")
        medications_text = st.text_area("Medicamentos Actuales", 
                                       placeholder="Lista de medicamentos con dosis y frecuencia")
        
        # Solo un bot√≥n de submit dentro del form
        submitted = st.form_submit_button("‚ûï Registrar Paciente", use_container_width=True)
        
        if submitted:
            if name and age:
                patient_id = len(st.session_state.patients) + 1
                new_patient = {
                    'id': patient_id,
                    'name': name,
                    'age': age,
                    'gender': gender,
                    'room': room,
                    'admission_date': str(admission_date),
                    'emergency_contact': emergency_contact,
                    'risk_level': risk_level,
                    'cognitive_level': cognitive_level,
                    'allergies': allergies,
                    'medical_history': medical_history,
                    'conditions': {
                        'diabetes': diabetes,
                        'hypertension': hypertension,
                        'heart_disease': heart_disease,
                        'dementia': dementia,
                        'depression': depression,
                        'mobility_issues': mobility_issues
                    },
                    'medications': medications_text,
                    'registered_date': str(date.today()),
                    'registered_time': datetime.now().strftime("%H:%M:%S")
                }
                
                st.session_state.patients[patient_id] = new_patient
                
                st.markdown(f"""
                <div class="alert-success">
                    <h3>‚úÖ ¬°Paciente registrado exitosamente!</h3>
                    <p><strong>Nombre:</strong> {name}</p>
                    <p><strong>ID del paciente:</strong> {patient_id}</p>
                    <p><strong>Habitaci√≥n:</strong> {room}</p>
                    <p>El paciente ha sido a√±adido al sistema y est√° listo para evaluaciones.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Mostrar bot√≥n para ir al dashboard FUERA del form
                st.session_state.patient_just_registered = True
                
            else:
                st.markdown("""
                <div class="alert-critical">
                    ‚ùå <strong>Error:</strong> Por favor complete los campos obligatorios (marcados con *)
                </div>
                """, unsafe_allow_html=True)
    
    # Bot√≥n para ir al Dashboard FUERA del form
    if st.session_state.get('patient_just_registered', False):
        if st.button("üè† Ir al Dashboard", use_container_width=True):
            st.session_state.current_page = 'üìä Dashboard'
            st.session_state.patient_just_registered = False  # Reset the flag
            st.rerun()

def show_evaluation():
    """P√°gina de evaluaci√≥n de pacientes"""
    st.markdown("## üìã Nueva Evaluaci√≥n de Paciente")
    
    if not st.session_state.patients:
        st.markdown("""
        <div class="alert-warning">
            ‚ö†Ô∏è <strong>No hay pacientes registrados</strong><br>
            Primero registra un paciente en la secci√≥n "Nuevo Paciente"
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Selector de paciente
    patient_options = {
        f"{p['name']} - Hab. {p['room']} (Riesgo: {p.get('risk_level', 'N/A')})": p['id'] 
        for p in st.session_state.patients.values()
    }
    
    selected_patient_key = st.selectbox(
        "üîç Seleccionar paciente para evaluaci√≥n:",
        options=list(patient_options.keys())
    )
    
    if selected_patient_key:
        patient_id = patient_options[selected_patient_key]
        patient = st.session_state.patients[patient_id]
        
        # Mostrar informaci√≥n del paciente
        st.markdown(f"### üë§ Evaluando a: {patient['name']}")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.info(f"**Edad:** {patient['age']} a√±os")
        with col2:
            st.info(f"**Habitaci√≥n:** {patient['room']}")
        with col3:
            risk_level = patient.get('risk_level', 'Medio')
            if risk_level == 'Alto':
                st.error(f"**Riesgo:** {risk_level}")
            elif risk_level == 'Medio':
                st.warning(f"**Riesgo:** {risk_level}")
            else:
                st.success(f"**Riesgo:** {risk_level}")
        with col4:
            st.info(f"**Cognitivo:** {patient.get('cognitive_level', 'N/A')}")
        
        # Mostrar condiciones m√©dicas conocidas
        conditions = patient.get('conditions', {})
        active_conditions = [k.replace('_', ' ').title() for k, v in conditions.items() if v]
        if active_conditions:
            st.markdown(f"**üè• Condiciones conocidas:** {', '.join(active_conditions)}")
        
        # Formulario de evaluaci√≥n
        with st.form("evaluation_form"):
            st.markdown("### ü©∫ Signos Vitales")
            col1, col2 = st.columns(2)
            
            with col1:
                systolic_bp = st.number_input("Presi√≥n Sist√≥lica (mmHg)", 80, 250, 120, 
                                            help="Valor normal: 90-140 mmHg")
                diastolic_bp = st.number_input("Presi√≥n Diast√≥lica (mmHg)", 40, 150, 80,
                                             help="Valor normal: 60-90 mmHg")
                heart_rate = st.number_input("Frecuencia Card√≠aca (lpm)", 30, 200, 72,
                                           help="Valor normal: 60-100 lpm")
            
            with col2:
                temperature = st.number_input("Temperatura (¬∞C)", 35.0, 42.0, 36.5, step=0.1,
                                            help="Valor normal: 36.1-37.2¬∞C")
                oxygen_saturation = st.number_input("Saturaci√≥n O‚ÇÇ (%)", 70, 100, 98,
                                                  help="Valor normal: >95%")
                pain_level = st.slider("Nivel de Dolor (0-10)", 0, 10, 0,
                                     help="0 = Sin dolor, 10 = Dolor m√°ximo")
            
            st.markdown("### üìù Estado General")
            col1, col2 = st.columns(2)
            
            with col1:
                mobility = st.selectbox(
                    "Estado de Movilidad",
                    ["Independiente", "Asistencia M√≠nima", "Asistencia Total", "Inm√≥vil"]
                )
                appetite = st.selectbox("Apetito", ["Bueno", "Regular", "Malo"])
                sleep_quality = st.selectbox("Calidad del Sue√±o", ["Buena", "Regular", "Mala"])
            
            with col2:
                mood = st.selectbox(
                    "Estado de √Ånimo",
                    ["Alegre", "Normal", "Triste", "Agitado", "Ap√°tico"]
                )
                cognitive_status = st.selectbox(
                    "Estado Cognitivo Aparente",
                    ["Alerta", "Confuso", "Somnoliento", "Agitado"]
                )
                continence = st.selectbox(
                    "Control de Esf√≠nteres",
                    ["Continente", "Incontinencia Ocasional", "Incontinencia Total"]
                )
            
            st.markdown("### üîç S√≠ntomas y Observaciones")
            symptoms = st.multiselect(
                "S√≠ntomas Observados:",
                [
                    "Confusi√≥n", "Agitaci√≥n", "Ca√≠das recientes", "P√©rdida de apetito",
                    "Dificultad respiratoria", "Dolor tor√°cico", "N√°useas", "V√≥mitos",
                    "Mareos", "Estre√±imiento", "Diarrea", "Edemas", "Tos", "Fiebre"
                ]
            )
            
            observations = st.text_area(
                "Observaciones Adicionales:",
                placeholder="Descripci√≥n detallada de cualquier cambio, situaci√≥n especial o comportamiento observado..."
            )
            
            # Evaluador
            evaluator = st.text_input("Nombre del Evaluador", placeholder="Nombre del cuidador")
            
            submitted = st.form_submit_button("üîç Completar Evaluaci√≥n y Generar An√°lisis", 
                                            use_container_width=True)
            
            if submitted:
                # Crear evaluaci√≥n completa
                evaluation = create_evaluation(
                    patient_id, patient, systolic_bp, diastolic_bp, heart_rate,
                    temperature, oxygen_saturation, pain_level, mobility, appetite,
                    sleep_quality, mood, cognitive_status, continence, symptoms,
                    observations, evaluator
                )
                
                # Guardar evaluaci√≥n
                st.session_state.evaluations.append(evaluation)
                
                # Generar an√°lisis autom√°tico
                analysis = analyze_evaluation_complete(evaluation, patient)
                
                # Guardar reporte CSV autom√°ticamente
                save_evaluation_to_csv(evaluation, patient, analysis)
                
                # Mostrar resultados
                show_evaluation_results(evaluation, analysis, patient)

def create_evaluation(patient_id, patient, systolic_bp, diastolic_bp, heart_rate, 
                     temperature, oxygen_saturation, pain_level, mobility, appetite,
                     sleep_quality, mood, cognitive_status, continence, symptoms, 
                     observations, evaluator):
    """Crea un objeto de evaluaci√≥n completo"""
    return {
        'id': len(st.session_state.evaluations) + 1,
        'patient_id': patient_id,
        'patient_name': patient['name'],
        'date': str(date.today()),
        'time': datetime.now().strftime("%H:%M:%S"),
        'vital_signs': {
            'systolic_bp': systolic_bp,
            'diastolic_bp': diastolic_bp,
            'blood_pressure': f"{systolic_bp}/{diastolic_bp}",
            'heart_rate': heart_rate,
            'temperature': temperature,
            'oxygen_saturation': oxygen_saturation,
            'pain_level': pain_level
        },
        'general_status': {
            'mobility': mobility,
            'appetite': appetite,
            'sleep_quality': sleep_quality,
            'mood': mood,
            'cognitive_status': cognitive_status,
            'continence': continence
        },
        'symptoms': symptoms,
        'observations': observations,
        'evaluator': evaluator or "Sistema IA Geri√°trico",
        'timestamp': datetime.now().isoformat()
    }

def analyze_evaluation_complete(evaluation, patient):
    """An√°lisis completo de la evaluaci√≥n con alertas y recomendaciones"""
    alerts = []
    recommendations = []
    severity_score = 0
    
    vitals = evaluation['vital_signs']
    status = evaluation['general_status']
    
    # An√°lisis de signos vitales
    # Presi√≥n arterial
    if vitals['systolic_bp'] > 180 or vitals['diastolic_bp'] > 110:
        alerts.append({
            'level': 'critical',
            'message': f"CRISIS HIPERTENSIVA: PA {vitals['blood_pressure']} mmHg"
        })
        recommendations.append("üö® CONTACTAR M√âDICO INMEDIATAMENTE - Crisis hipertensiva")
        severity_score += 4
    elif vitals['systolic_bp'] > 160 or vitals['diastolic_bp'] > 100:
        alerts.append({
            'level': 'warning',
            'message': f"Hipertensi√≥n severa: PA {vitals['blood_pressure']} mmHg"
        })
        recommendations.append("Contactar m√©dico para ajuste de medicaci√≥n antihipertensiva")
        severity_score += 3
    elif vitals['systolic_bp'] > 140 or vitals['diastolic_bp'] > 90:
        alerts.append({
            'level': 'warning',
            'message': f"Hipertensi√≥n: PA {vitals['blood_pressure']} mmHg"
        })
        recommendations.append("Monitorizar presi√≥n arterial m√°s frecuentemente")
        severity_score += 2
    
    if vitals['systolic_bp'] < 90 or vitals['diastolic_bp'] < 60:
        alerts.append({
            'level': 'warning',
            'message': f"Hipotensi√≥n: PA {vitals['blood_pressure']} mmHg"
        })
        recommendations.append("Monitorizar signos de mareo y ca√≠das")
        severity_score += 2
    
    # Frecuencia card√≠aca
    if vitals['heart_rate'] > 120:
        alerts.append({
            'level': 'critical' if vitals['heart_rate'] > 150 else 'warning',
            'message': f"Taquicardia: {vitals['heart_rate']} lpm"
        })
        recommendations.append("Evaluar causas de taquicardia (dolor, ansiedad, medicaci√≥n)")
        severity_score += 3 if vitals['heart_rate'] > 150 else 2
    elif vitals['heart_rate'] < 50:
        alerts.append({
            'level': 'warning',
            'message': f"Bradicardia: {vitals['heart_rate']} lpm"
        })
        recommendations.append("Evaluar medicaci√≥n que pueda causar bradicardia")
        severity_score += 2
    
    # Temperatura
    if vitals['temperature'] > 38.5:
        alerts.append({
            'level': 'critical',
            'message': f"Fiebre alta: {vitals['temperature']}¬∞C"
        })
        recommendations.append("üö® Evaluar foco infeccioso - Contactar m√©dico")
        severity_score += 3
    elif vitals['temperature'] > 37.8:
        alerts.append({
            'level': 'warning',
            'message': f"Febr√≠cula: {vitals['temperature']}¬∞C"
        })
        recommendations.append("Monitorizar evoluci√≥n y buscar signos de infecci√≥n")
        severity_score += 2
    elif vitals['temperature'] < 36.0:
        alerts.append({
            'level': 'warning',
            'message': f"Hipotermia: {vitals['temperature']}¬∞C"
        })
        recommendations.append("Medidas de calentamiento y evaluar causas")
        severity_score += 2
    
    # Saturaci√≥n de ox√≠geno
    if vitals['oxygen_saturation'] < 90:
        alerts.append({
            'level': 'critical',
            'message': f"Hipoxemia severa: {vitals['oxygen_saturation']}%"
        })
        recommendations.append("üö® OX√çGENO INMEDIATO - Contactar m√©dico urgente")
        severity_score += 4
    elif vitals['oxygen_saturation'] < 95:
        alerts.append({
            'level': 'warning',
            'message': f"Hipoxemia: {vitals['oxygen_saturation']}%"
        })
        recommendations.append("Evaluar necesidad de oxigenoterapia")
        severity_score += 3
    
    # Dolor
    if vitals['pain_level'] >= 8:
        alerts.append({
            'level': 'critical',
            'message': f"Dolor severo: {vitals['pain_level']}/10"
        })
        recommendations.append("üö® Analgesia urgente - Evaluar causa del dolor")
        severity_score += 3
    elif vitals['pain_level'] >= 6:
        alerts.append({
            'level': 'warning',
            'message': f"Dolor moderado-severo: {vitals['pain_level']}/10"
        })
        recommendations.append("Optimizar analgesia seg√∫n protocolo")
        severity_score += 2
    
    # Estado general
    if status['mobility'] == 'Inm√≥vil':
        alerts.append({
            'level': 'warning',
            'message': "Paciente inm√≥vil - Riesgo de complicaciones"
        })
        recommendations.append("Cambios posturales cada 2h, fisioterapia, prevenci√≥n de √∫lceras")
        severity_score += 2
    
    if status['appetite'] == 'Malo':
        alerts.append({
            'level': 'warning',
            'message': "P√©rdida de apetito - Riesgo nutricional"
        })
        recommendations.append("Evaluaci√≥n nutricional y medidas para estimular apetito")
        severity_score += 1
    
    if status['mood'] in ['Triste', 'Ap√°tico']:
        alerts.append({
            'level': 'warning',
            'message': f"Estado de √°nimo: {status['mood']} - Evaluar depresi√≥n"
        })
        recommendations.append("Considerar evaluaci√≥n psicol√≥gica y actividades terap√©uticas")
        severity_score += 1
    elif status['mood'] == 'Agitado':
        alerts.append({
            'level': 'warning',
            'message': "Agitaci√≥n - Evaluar causas"
        })
        recommendations.append("Investigar causas de agitaci√≥n (dolor, infecci√≥n, medicaci√≥n)")
        severity_score += 2
    
    if status['cognitive_status'] in ['Confuso', 'Agitado']:
        alerts.append({
            'level': 'warning',
            'message': f"Estado cognitivo alterado: {status['cognitive_status']}"
        })
        recommendations.append("Evaluaci√≥n de delirium - Buscar causas reversibles")
        severity_score += 2
    
    # An√°lisis de s√≠ntomas
    critical_symptoms = ['Dificultad respiratoria', 'Dolor tor√°cico', 'Ca√≠das recientes']
    warning_symptoms = ['Confusi√≥n', 'Agitaci√≥n', 'N√°useas', 'V√≥mitos', 'Mareos']
    
    for symptom in evaluation['symptoms']:
        if symptom in critical_symptoms:
            alerts.append({
                'level': 'critical',
                'message': f"S√≠ntoma cr√≠tico: {symptom}"
            })
            if symptom == 'Dolor tor√°cico':
                recommendations.append("üö® Protocolo dolor tor√°cico - ECG y enzimas card√≠acas")
            elif symptom == 'Dificultad respiratoria':
                recommendations.append("üö® Evaluaci√≥n respiratoria urgente - Gasometr√≠a")
            elif symptom == 'Ca√≠das recientes':
                recommendations.append("üö® Evaluaci√≥n neurol√≥gica - Protocolo post-ca√≠da")
            severity_score += 3
        elif symptom in warning_symptoms:
            alerts.append({
                'level': 'warning',
                'message': f"S√≠ntoma de atenci√≥n: {symptom}"
            })
            severity_score += 1
    
    # Determinar nivel de severidad general
    if severity_score >= 10:
        severity_level = "CR√çTICO"
    elif severity_score >= 6:
        severity_level = "ALTO"
    elif severity_score >= 3:
        severity_level = "MODERADO"
    else:
        severity_level = "BAJO"
    
    # Recomendaciones generales seg√∫n el paciente
    patient_conditions = patient.get('conditions', {})
    
    if patient_conditions.get('diabetes') and vitals['temperature'] > 37.5:
        recommendations.append("Paciente diab√©tico con fiebre - Controlar glucemia")
    
    if patient_conditions.get('heart_disease') and vitals['heart_rate'] > 100:
        recommendations.append("Cardiopat√≠a conocida con taquicardia - Monitorizaci√≥n ECG")
    
    if patient.get('risk_level') == 'Alto':
        recommendations.append("Paciente de alto riesgo - Vigilancia estrecha")
    
    return {
        'alerts': alerts,
        'recommendations': recommendations,
        'severity_score': severity_score,
        'severity_level': severity_level,
        'requires_immediate_attention': severity_score >= 6 or any(a['level'] == 'critical' for a in alerts),
        'analysis_timestamp': datetime.now().isoformat()
    }

def save_evaluation_to_csv(evaluation, patient, analysis):
    """Guarda la evaluaci√≥n en un archivo CSV diario"""
    try:
        # Crear directorio si no existe
        reports_dir = "data/reports"
        os.makedirs(reports_dir, exist_ok=True)
        
        # Nombre del archivo CSV diario
        today = date.today().strftime("%Y-%m-%d")
        csv_filename = os.path.join(reports_dir, f"evaluaciones_diarias_{today}.csv")
        
        # Preparar datos para CSV
        csv_data = {
            'fecha_evaluacion': evaluation['date'],
            'hora_evaluacion': evaluation['time'],
            'id_paciente': evaluation['patient_id'],
            'nombre_paciente': evaluation['patient_name'],
            'edad': patient['age'],
            'habitacion': patient['room'],
            'presion_sistolica': evaluation['vital_signs']['systolic_bp'],
            'presion_diastolica': evaluation['vital_signs']['diastolic_bp'],
            'frecuencia_cardiaca': evaluation['vital_signs']['heart_rate'],
            'temperatura': evaluation['vital_signs']['temperature'],
            'saturacion_oxigeno': evaluation['vital_signs']['oxygen_saturation'],
            'nivel_dolor': evaluation['vital_signs']['pain_level'],
            'estado_movilidad': evaluation['general_status']['mobility'],
            'apetito': evaluation['general_status']['appetite'],
            'calidad_sueno': evaluation['general_status']['sleep_quality'],
            'estado_animo': evaluation['general_status']['mood'],
            'estado_cognitivo': evaluation['general_status']['cognitive_status'],
            'continencia': evaluation['general_status']['continence'],
            'sintomas_observados': ', '.join(evaluation['symptoms']) if evaluation['symptoms'] else 'Ninguno',
            'observaciones_adicionales': evaluation['observations'],
            'evaluador': evaluation['evaluator'],
            'puntuacion_severidad': analysis['severity_score'],
            'nivel_severidad': analysis['severity_level'],
            'requiere_atencion_medica': 'S√≠' if analysis['requires_immediate_attention'] else 'No',
            'alertas_criticas': len([a for a in analysis['alerts'] if a['level'] == 'critical']),
            'alertas_advertencia': len([a for a in analysis['alerts'] if a['level'] == 'warning']),
            'numero_recomendaciones': len(analysis['recommendations'])
        }
        
        # Verificar si el archivo existe
        file_exists = os.path.exists(csv_filename)
        
        # Escribir al CSV
        with open(csv_filename, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = list(csv_data.keys())
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            # Escribir encabezados solo si es un archivo nuevo
            if not file_exists:
                writer.writeheader()
            
            # Escribir datos de la evaluaci√≥n
            writer.writerow(csv_data)
        
        return csv_filename
    
    except Exception as e:
        st.error(f"Error al guardar reporte CSV: {str(e)}")
        return None

def show_evaluation_results(evaluation, analysis, patient):
    """Muestra los resultados de la evaluaci√≥n"""
    st.markdown("---")
    st.markdown("## üìä An√°lisis de la Evaluaci√≥n Completada")
    
    # Nivel de severidad general
    severity_colors = {
        'CR√çTICO': '#dc3545',
        'ALTO': '#fd7e14',
        'MODERADO': '#ffc107',
        'BAJO': '#28a745'
    }
    
    severity_color = severity_colors.get(analysis['severity_level'], '#6c757d')
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card" style="border-left-color: {severity_color}; background: {severity_color}15;">
            <h3 style="color: {severity_color}; margin: 0;">üìä Severidad</h3>
            <h1 style="margin: 0.5rem 0; color: {severity_color};">{analysis['severity_level']}</h1>
            <p style="margin: 0; color: #666;">Puntuaci√≥n: {analysis['severity_score']}/20</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        critical_alerts = len([a for a in analysis['alerts'] if a['level'] == 'critical'])
        st.markdown(f"""
        <div class="metric-card" style="border-left-color: #dc3545; background: #dc354515;">
            <h3 style="color: #dc3545; margin: 0;">üö® Alertas Cr√≠ticas</h3>
            <h1 style="margin: 0.5rem 0; color: #dc3545;">{critical_alerts}</h1>
            <p style="margin: 0; color: #666;">Total alertas: {len(analysis['alerts'])}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card" style="border-left-color: #17a2b8; background: #17a2b815;">
            <h3 style="color: #17a2b8; margin: 0;">üí° Recomendaciones</h3>
            <h1 style="margin: 0.5rem 0; color: #17a2b8;">{len(analysis['recommendations'])}</h1>
            <p style="margin: 0; color: #666;">Acciones sugeridas</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Mostrar alertas si las hay
    if analysis['alerts']:
        st.markdown("### üö® Alertas Detectadas")
        
        for alert in analysis['alerts']:
            if alert['level'] == 'critical':
                st.markdown(f"""
                <div class="alert-critical">
                    üö® <strong>CR√çTICO:</strong> {alert['message']}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="alert-warning">
                    ‚ö†Ô∏è <strong>ATENCI√ìN:</strong> {alert['message']}
                </div>
                """, unsafe_allow_html=True)
    
    # Mostrar recomendaciones
    if analysis['recommendations']:
        st.markdown("### üí° Recomendaciones Cl√≠nicas")
        
        for i, rec in enumerate(analysis['recommendations'], 1):
            if rec.startswith('üö®'):
                st.markdown(f"""
                <div class="alert-critical">
                    <strong>{i}.</strong> {rec}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"**{i}.** {rec}")
    
    # Resumen de signos vitales
    st.markdown("### üìà Resumen de Signos Vitales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        vitals_data = {
            'Par√°metro': ['Presi√≥n Arterial', 'Frecuencia Card√≠aca', 'Temperatura', 'Saturaci√≥n O‚ÇÇ', 'Dolor'],
            'Valor': [
                evaluation['vital_signs']['blood_pressure'] + ' mmHg',
                str(evaluation['vital_signs']['heart_rate']) + ' lpm',
                str(evaluation['vital_signs']['temperature']) + '¬∞C',
                str(evaluation['vital_signs']['oxygen_saturation']) + '%',
                str(evaluation['vital_signs']['pain_level']) + '/10'
            ],
            'Estado': [
                get_vital_status('bp', evaluation['vital_signs']['systolic_bp'], evaluation['vital_signs']['diastolic_bp']),
                get_vital_status('hr', evaluation['vital_signs']['heart_rate']),
                get_vital_status('temp', evaluation['vital_signs']['temperature']),
                get_vital_status('spo2', evaluation['vital_signs']['oxygen_saturation']),
                get_vital_status('pain', evaluation['vital_signs']['pain_level'])
            ]
        }
        
        vitals_df = pd.DataFrame(vitals_data)
        st.dataframe(vitals_df, hide_index=True, use_container_width=True)
    
    with col2:
        st.markdown("**Estado General:**")
        st.write(f"‚Ä¢ **Movilidad:** {evaluation['general_status']['mobility']}")
        st.write(f"‚Ä¢ **Apetito:** {evaluation['general_status']['appetite']}")
        st.write(f"‚Ä¢ **Sue√±o:** {evaluation['general_status']['sleep_quality']}")
        st.write(f"‚Ä¢ **√Ånimo:** {evaluation['general_status']['mood']}")
        st.write(f"‚Ä¢ **Cognitivo:** {evaluation['general_status']['cognitive_status']}")
        st.write(f"‚Ä¢ **Continencia:** {evaluation['general_status']['continence']}")
    
    # S√≠ntomas si los hay
    if evaluation['symptoms']:
        st.markdown("### üîç S√≠ntomas Observados")
        for symptom in evaluation['symptoms']:
            st.markdown(f"‚Ä¢ {symptom}")
    
    # Observaciones
    if evaluation['observations']:
        st.markdown("### üìù Observaciones")
        st.markdown(f"*\"{evaluation['observations']}\"*")
    
    # Mensaje de √©xito final
    st.markdown(f"""
    <div class="alert-success">
        <h4>‚úÖ Evaluaci√≥n Completada y Guardada</h4>
        <p><strong>Fecha:</strong> {evaluation['date']} a las {evaluation['time']}</p>
        <p><strong>Evaluador:</strong> {evaluation['evaluator']}</p>
        <p><strong>Archivo CSV:</strong> Guardado autom√°ticamente en data/reports/</p>
        {f'<p style="color: #dc3545;"><strong>‚ö†Ô∏è ATENCI√ìN M√âDICA REQUERIDA</strong></p>' if analysis['requires_immediate_attention'] else ''}
    </div>
    """, unsafe_allow_html=True)

def get_vital_status(vital_type, value1, value2=None):
    """Determina el estado de un signo vital"""
    if vital_type == 'bp':
        systolic, diastolic = value1, value2
        if systolic > 160 or diastolic > 100:
            return "üî¥ Elevada"
        elif systolic < 90 or diastolic < 60:
            return "üîµ Baja"
        elif systolic > 140 or diastolic > 90:
            return "üü° L√≠mite"
        else:
            return "üü¢ Normal"
    
    elif vital_type == 'hr':
        if value1 > 100:
            return "üî¥ Elevada"
        elif value1 < 60:
            return "üîµ Baja"
        else:
            return "üü¢ Normal"
    
    elif vital_type == 'temp':
        if value1 > 37.8:
            return "üî¥ Elevada"
        elif value1 < 36.0:
            return "üîµ Baja"
        else:
            return "üü¢ Normal"
    
    elif vital_type == 'spo2':
        if value1 < 90:
            return "üî¥ Baja"
        elif value1 < 95:
            return "üü° L√≠mite"
        else:
            return "üü¢ Normal"
    
    elif vital_type == 'pain':
        if value1 >= 7:
            return "üî¥ Severo"
        elif value1 >= 4:
            return "üü° Moderado"
        elif value1 > 0:
            return "üü† Leve"
        else:
            return "üü¢ Sin dolor"
    
    return "‚ùì N/A"

def show_medications():
    """P√°gina de gesti√≥n de medicamentos"""
    st.markdown("## üíä Gesti√≥n de Medicamentos")
    
    st.markdown("""
    <div class="alert-success">
        <h4>üöß Funcionalidad en Desarrollo</h4>
        <p>Esta secci√≥n incluir√°:</p>
        <ul>
            <li>üíä <strong>Control de medicaci√≥n</strong> por horarios</li>
            <li>‚ö†Ô∏è <strong>Verificaci√≥n de interacciones</strong> medicamentosas</li>
            <li>üìã <strong>Criterios Beers</strong> para geriatr√≠a</li>
            <li>üîÑ <strong>Seguimiento de adherencia</strong> terap√©utica</li>
            <li>üìä <strong>Reportes de medicaci√≥n</strong></li>
        </ul>
        <p><em>Pr√≥ximamente disponible en la siguiente actualizaci√≥n.</em></p>
    </div>
    """, unsafe_allow_html=True)

def show_physiotherapy():
    """P√°gina de fisioterapia"""
    st.markdown("## üèÉ‚Äç‚ôÇÔ∏è Fisioterapia y Rehabilitaci√≥n")
    
    st.markdown("""
    <div class="alert-success">
        <h4>üöß Funcionalidad en Desarrollo</h4>
        <p>Esta secci√≥n incluir√°:</p>
        <ul>
            <li>üèÉ‚Äç‚ôÇÔ∏è <strong>Planes de ejercicio</strong> personalizados</li>
            <li>‚öñÔ∏è <strong>Evaluaci√≥n de equilibrio</strong> y marcha</li>
            <li>üí™ <strong>Ejercicios de fortalecimiento</strong></li>
            <li>üìè <strong>Medici√≥n de progreso</strong> funcional</li>
            <li>‚ö†Ô∏è <strong>Prevenci√≥n de ca√≠das</strong> espec√≠fica</li>
        </ul>
        <p><em>Pr√≥ximamente disponible en la siguiente actualizaci√≥n.</em></p>
    </div>
    """, unsafe_allow_html=True)

def show_reports():
    """P√°gina de reportes y estad√≠sticas"""
    st.markdown("## üìä Reportes y Estad√≠sticas")
    
    if not st.session_state.evaluations:
        st.markdown("""
        <div class="alert-warning">
            üìä <strong>No hay evaluaciones para generar reportes</strong><br>
            Realiza algunas evaluaciones primero para ver estad√≠sticas y reportes.
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Estad√≠sticas generales
    st.markdown("### üìà Estad√≠sticas Generales")
    
    col1, col2, col3, col4 = st.columns(4)
    
    total_evaluations = len(st.session_state.evaluations)
    unique_patients = len(set(e['patient_id'] for e in st.session_state.evaluations))
    today_evaluations = sum(1 for e in st.session_state.evaluations if e['date'] == str(date.today()))
    
    with col1:
        st.metric("üìã Total Evaluaciones", total_evaluations)
    with col2:
        st.metric("üë• Pacientes Evaluados", unique_patients)
    with col3:
        st.metric("üìÖ Evaluaciones Hoy", today_evaluations)
    with col4:
        avg_per_day = total_evaluations / max(1, len(set(e['date'] for e in st.session_state.evaluations)))
        st.metric("üìä Promedio/D√≠a", f"{avg_per_day:.1f}")
    
    # Tabla de evaluaciones recientes
    st.markdown("### üìã Evaluaciones Recientes")
    
    # Preparar datos para la tabla
    recent_evaluations = st.session_state.evaluations[-20:]  # √öltimas 20
    
    table_data = []
    for eval_data in reversed(recent_evaluations):
        patient_name = eval_data.get('patient_name', 'N/A')
        date_str = eval_data.get('date', 'N/A')
        time_str = eval_data.get('time', 'N/A')
        
        # Obtener algunos valores clave
        vitals = eval_data.get('vital_signs', {})
        bp = vitals.get('blood_pressure', 'N/A')
        hr = vitals.get('heart_rate', 'N/A')
        temp = vitals.get('temperature', 'N/A')
        pain = vitals.get('pain_level', 'N/A')
        
        # Estado general
        status = eval_data.get('general_status', {})
        mobility = status.get('mobility', 'N/A')
        mood = status.get('mood', 'N/A')
        
        table_data.append({
            'Fecha': date_str,
            'Hora': time_str,
            'Paciente': patient_name,
            'PA': bp,
            'FC': f"{hr} lpm" if hr != 'N/A' else 'N/A',
            'Temp': f"{temp}¬∞C" if temp != 'N/A' else 'N/A',
            'Dolor': f"{pain}/10" if pain != 'N/A' else 'N/A',
            'Movilidad': mobility,
            '√Ånimo': mood
        })
    
    if table_data:
        df = pd.DataFrame(table_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
        
        # Botones de exportaci√≥n
        st.markdown("### üì• Exportar Datos")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Exportar Tabla Actual", use_container_width=True):
                csv_data = df.to_csv(index=False)
                st.download_button(
                    label="üíæ Descargar CSV",
                    data=csv_data,
                    file_name=f"evaluaciones_recientes_{date.today()}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
        
        with col2:
            if st.button("üìã Reporte Completo", use_container_width=True):
                complete_data = []
                for eval_data in st.session_state.evaluations:
                    # Crear registro completo
                    record = {
                        'ID_Evaluacion': eval_data.get('id', ''),
                        'ID_Paciente': eval_data.get('patient_id', ''),
                        'Nombre_Paciente': eval_data.get('patient_name', ''),
                        'Fecha': eval_data.get('date', ''),
                        'Hora': eval_data.get('time', ''),
                        'Evaluador': eval_data.get('evaluator', ''),
                    }
                    
                    # Signos vitales
                    vitals = eval_data.get('vital_signs', {})
                    record.update({
                        'PA_Sistolica': vitals.get('systolic_bp', ''),
                        'PA_Diastolica': vitals.get('diastolic_bp', ''),
                        'Frecuencia_Cardiaca': vitals.get('heart_rate', ''),
                        'Temperatura': vitals.get('temperature', ''),
                        'Saturacion_O2': vitals.get('oxygen_saturation', ''),
                        'Nivel_Dolor': vitals.get('pain_level', '')
                    })
                    
                    # Estado general
                    status = eval_data.get('general_status', {})
                    record.update({
                        'Movilidad': status.get('mobility', ''),
                        'Apetito': status.get('appetite', ''),
                        'Calidad_Sueno': status.get('sleep_quality', ''),
                        'Estado_Animo': status.get('mood', ''),
                        'Estado_Cognitivo': status.get('cognitive_status', ''),
                        'Continencia': status.get('continence', '')
                    })
                    
                    # Otros datos
                    record.update({
                        'Sintomas': ', '.join(eval_data.get('symptoms', [])),
                        'Observaciones': eval_data.get('observations', '')
                    })
                    
                    complete_data.append(record)
                
                complete_df = pd.DataFrame(complete_data)
                csv_complete = complete_df.to_csv(index=False)
                
                st.download_button(
                    label="üíæ Descargar Reporte Completo",
                    data=csv_complete,
                    file_name=f"reporte_completo_evaluaciones_{date.today()}.csv",
                    mime="text/csv",
                    use_container_width=True
                )
        
        with col3:
            if st.button("üìä Estad√≠sticas Avanzadas", use_container_width=True):
                st.markdown("üöß Estad√≠sticas avanzadas pr√≥ximamente disponibles")
    
    # Gr√°ficos simples si hay datos suficientes
    if len(st.session_state.evaluations) > 1:
        st.markdown("### üìà Tendencias")
        
        # Gr√°fico de evaluaciones por d√≠a
        daily_counts = {}
        for eval_data in st.session_state.evaluations:
            date_key = eval_data.get('date', str(date.today()))
            daily_counts[date_key] = daily_counts.get(date_key, 0) + 1
        
        if daily_counts:
            dates = list(daily_counts.keys())
            counts = list(daily_counts.values())
            
            chart_data = pd.DataFrame({
                'Fecha': [datetime.strptime(d, '%Y-%m-%d').strftime('%d/%m') for d in sorted(dates)],
                'Evaluaciones': [daily_counts[d] for d in sorted(dates)]
            })
            
            st.line_chart(chart_data.set_index('Fecha'), height=300)

def show_emergency_protocols():
    """P√°gina de protocolos de emergencia"""
    st.markdown("## üö® Protocolos de Emergencia")
    
    st.markdown("""
    <div class="alert-critical">
        <h3>üìû CONTACTOS DE EMERGENCIA</h3>
        <p><strong>112</strong> - Emergencias generales (Polic√≠a, Bomberos, Sanitarios)</p>
        <p><strong>061</strong> - Urgencias sanitarias</p>
        <p><strong>Centro m√©dico de referencia</strong> - [Configurar en ajustes]</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Protocolos principales
    protocols = {
        "üíî Dolor Tor√°cico": {
            "pasos": [
                "1. Mantener al paciente en reposo absoluto",
                "2. Aflojar ropa ajustada",
                "3. Administrar AAS 100mg (si no hay contraindicaciones)",
                "4. Tomar signos vitales",
                "5. Administrar nitroglicerina sublingual si est√° prescrita",
                "6. LLAMAR 112 INMEDIATAMENTE",
                "7. Preparar historia cl√≠nica y medicaci√≥n actual"
            ],
            "color": "#dc3545"
        },
        "ü´Å Dificultad Respiratoria": {
            "pasos": [
                "1. Colocar al paciente en posici√≥n semisentado (45¬∞)",
                "2. Asegurar v√≠a a√©rea permeable",
                "3. Administrar ox√≠geno si est√° disponible",
                "4. Aflojar ropa que comprima",
                "5. Tomar saturaci√≥n de ox√≠geno y signos vitales",
                "6. Contactar m√©dico urgente",
                "7. Preparar para posible traslado"
            ],
            "color": "#fd7e14"
        },
        "‚ö° Ca√≠das": {
            "pasos": [
                "1. NO MOVER al paciente inicialmente",
                "2. Evaluar nivel de consciencia",
                "3. Comprobar lesiones evidentes",
                "4. Tomar signos vitales",
                "5. Evaluar movilidad de extremidades",
                "6. Si hay lesi√≥n grave o sospecha fractura ‚Üí 112",
                "7. Documentar circunstancias de la ca√≠da",
                "8. Implementar protocolo post-ca√≠da"
            ],
            "color": "#e74c3c"
        },
        "üß† Alteraci√≥n del Nivel de Consciencia": {
            "pasos": [
                "1. Evaluar respuesta verbal y motora",
                "2. Comprobar v√≠a a√©rea",
                "3. Tomar glucemia capilar",
                "4. Signos vitales completos",
                "5. Revisar pupilas",
                "6. Buscar signos de traumatismo",
                "7. Contactar m√©dico INMEDIATAMENTE",
                "8. Preparar traslado urgente"
            ],
            "color": "#6f42c1"
        },
        "üå°Ô∏è Fiebre Alta (>39¬∞C)": {
            "pasos": [
                "1. Confirmar temperatura con term√≥metro fiable",
                "2. Medidas f√≠sicas de enfriamiento",
                "3. Administrar antit√©rmico seg√∫n pauta",
                "4. Buscar foco infeccioso evidente",
                "5. Hidratar adecuadamente",
                "6. Tomar otros signos vitales",
                "7. Contactar m√©dico para evaluaci√≥n",
                "8. Monitorizar evoluci√≥n cada 30min"
            ],
            "color": "#ff6b6b"
        },
        "ü©∏ Hemorragia": {
            "pasos": [
                "1. Identificar origen y tipo de hemorragia",
                "2. Aplicar presi√≥n directa si es externa",
                "3. Elevar la extremidad si es posible",
                "4. No retirar objetos clavados",
                "5. Controlar signos vitales",
                "6. Preparar para shock hipovol√©mico",
                "7. LLAMAR 112 si es abundante",
                "8. Mantener v√≠a venosa si es posible"
            ],
            "color": "#dc3545"
        }
    }
    
    # Mostrar protocolos en pesta√±as
    tabs = st.tabs(list(protocols.keys()))
    
    for tab, (protocol_name, protocol_data) in zip(tabs, protocols.items()):
        with tab:
            st.markdown(f"""
            <div class="protocol-card" style="border-left-color: {protocol_data['color']};">
                <h3 style="color: {protocol_data['color']}; margin-top: 0;">{protocol_name}</h3>
            </div>
            """, unsafe_allow_html=True)
            
            for step in protocol_data["pasos"]:
                if "112" in step or "INMEDIATAMENTE" in step.upper():
                    st.markdown(f"""
                    <div class="alert-critical">
                        <strong>{step}</strong>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"**{step}**")
    
    # Calculadora de riesgo de ca√≠das
    st.markdown("---")
    st.markdown("### ‚öñÔ∏è Calculadora de Riesgo de Ca√≠das (Escala Morse)")
    
    if st.session_state.patients:
        patient_options = {p['name']: p['id'] for p in st.session_state.patients.values()}
        selected_patient = st.selectbox("Seleccionar paciente para evaluar:", list(patient_options.keys()))
        
        if selected_patient:
            with st.form("morse_scale_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    history_falls = st.selectbox("Historial de ca√≠das:", ["No (0)", "S√≠ (25)"])
                    secondary_diagnosis = st.selectbox("Diagn√≥stico secundario:", ["No (0)", "S√≠ (15)"])
                    ambulatory_aid = st.selectbox(
                        "Ayuda para caminar:",
                        ["Ninguna/Reposo/Enfermera (0)", "Muletas/Bast√≥n/Andador (15)", "Mobiliario (30)"]
                    )
                
                with col2:
                    iv_therapy = st.selectbox("Terapia IV/Heparina:", ["No (0)", "S√≠ (20)"])
                    gait = st.selectbox(
                        "Marcha:",
                        ["Normal/Reposo/Inm√≥vil (0)", "D√©bil (10)", "Alterada (20)"]
                    )
                    mental_status = st.selectbox("Estado mental:", ["Orientado (0)", "Desorientado (15)"])
                
                if st.form_submit_button("üîç Calcular Riesgo de Ca√≠das"):
                    # Extraer puntuaciones
                    score = 0
                    score += 25 if "25" in history_falls else 0
                    score += 15 if "15" in secondary_diagnosis else 0
                    score += 30 if "30" in ambulatory_aid else (15 if "15" in ambulatory_aid else 0)
                    score += 20 if "20" in iv_therapy else 0
                    score += 20 if "20" in gait else (10 if "10" in gait else 0)
                    score += 15 if "15" in mental_status else 0
                    
                    # Determinar nivel de riesgo
                    if score >= 51:
                        risk_level = "ALTO"
                        risk_color = "#dc3545"
                        recommendations = [
                            "üö® Supervisi√≥n constante",
                            "üõèÔ∏è Cama en posici√≥n m√°s baja",
                            "üõ°Ô∏è Barandillas elevadas cuando est√© en cama",
                            "üîî Timbre al alcance en todo momento",
                            "üëü Calzado antideslizante obligatorio",
                            "üí° Iluminaci√≥n nocturna adecuada",
                            "üìã Reevaluaci√≥n m√©dica urgente"
                        ]
                    elif score >= 25:
                        risk_level = "MODERADO"
                        risk_color = "#ffc107"
                        recommendations = [
                            "üëÅÔ∏è Supervisi√≥n frecuente",
                            "üßπ Eliminar obst√°culos en el entorno",
                            "üí° Mantener iluminaci√≥n adecuada",
                            "üëü Usar calzado antideslizante",
                            "üö∂ Acompa√±ar en desplazamientos",
                            "üìÖ Reevaluaci√≥n semanal"
                        ]
                    else:
                        risk_level = "BAJO"
                        risk_color = "#28a745"
                        recommendations = [
                            "‚úÖ Mantener vigilancia rutinaria",
                            "üìö Educaci√≥n sobre prevenci√≥n de ca√≠das",
                            "üè† Mantener ambiente seguro",
                            "üìÖ Reevaluaci√≥n mensual"
                        ]
                    
                    # Mostrar resultados
                    st.markdown("#### üìä Resultado de la Evaluaci√≥n")
                    
                    col1, col2 = st.columns([1, 2])
                    
                    with col1:
                        st.markdown(f"""
                        <div style="
                            background: {risk_color}15;
                            border: 2px solid {risk_color};
                            border-radius: 12px;
                            padding: 2rem;
                            text-align: center;
                        ">
                            <h2 style="margin: 0; color: {risk_color};">RIESGO {risk_level}</h2>
                            <h1 style="margin: 0.5rem 0; color: {risk_color};">{score}</h1>
                            <p style="margin: 0; color: #666;">Puntuaci√≥n Morse</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown("**üéØ Medidas Preventivas Recomendadas:**")
                        for rec in recommendations:
                            st.markdown(f"‚Ä¢ {rec}")

def show_settings():
    """P√°gina de configuraci√≥n"""
    st.markdown("## ‚öôÔ∏è Configuraci√≥n del Sistema")
    
    st.markdown("### üè• Informaci√≥n del Centro")
    
    with st.form("center_settings"):
        center_name = st.text_input("Nombre del Centro", value="Residencia Geri√°trica")
        center_address = st.text_area("Direcci√≥n")
        center_phone = st.text_input("Tel√©fono Principal")
        medical_emergency = st.text_input("Tel√©fono M√©dico de Urgencia")
        
        st.markdown("### üë§ Configuraci√≥n de Usuario")
        default_evaluator = st.text_input("Nombre del Evaluador por Defecto")
        
        st.markdown("### üîß Configuraci√≥n T√©cnica")
        auto_backup = st.checkbox("Backup autom√°tico de datos", value=True)
        csv_auto_export = st.checkbox("Exportaci√≥n autom√°tica a CSV", value=True)
        
        if st.form_submit_button("üíæ Guardar Configuraci√≥n"):
            st.success("‚úÖ Configuraci√≥n guardada exitosamente")
    
    st.markdown("---")
    st.markdown("### üìä Estad√≠sticas del Sistema")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üë• Total Pacientes", len(st.session_state.patients))
    with col2:
        st.metric("üìã Total Evaluaciones", len(st.session_state.evaluations))
    with col3:
        days_active = len(set(e.get('date', str(date.today())) for e in st.session_state.evaluations))
        st.metric("üìÖ D√≠as Activos", days_active)
    
    st.markdown("### üóëÔ∏è Gesti√≥n de Datos")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üì• Exportar Todos los Datos", use_container_width=True):
            # Crear backup completo
            backup_data = {
                'patients': st.session_state.patients,
                'evaluations': st.session_state.evaluations,
                'export_date': str(date.today()),
                'export_time': datetime.now().strftime("%H:%M:%S")
            }
            
            backup_json = json.dumps(backup_data, indent=2, ensure_ascii=False)
            
            st.download_button(
                label="üíæ Descargar Backup",
                data=backup_json,
                file_name=f"backup_asistente_geriatrico_{date.today()}.json",
                mime="application/json"
            )
    
    with col2:
        if st.button("üîÑ Reiniciar Datos de Prueba", use_container_width=True):
            if st.checkbox("Confirmar reinicio"):
                st.session_state.patients = {}
                st.session_state.evaluations = []
                st.success("‚úÖ Datos reiniciados")
                st.rerun()
    
    with col3:
        if st.button("‚ÑπÔ∏è Informaci√≥n del Sistema", use_container_width=True):
            st.markdown("""
            <div class="alert-success">
                <h4>üè• Asistente Geri√°trico con IA</h4>
                <p><strong>Versi√≥n:</strong> 1.0.0</p>
                <p><strong>Desarrollado para:</strong> Residencias geri√°tricas espa√±olas</p>
                <p><strong>Basado en:</strong> Gu√≠as de pr√°ctica cl√≠nica del SNS</p>
                <p><strong>Tecnolog√≠a:</strong> Streamlit + Python</p>
                <p><strong>√öltima actualizaci√≥n:</strong> {}</p>
            </div>
            """.format(date.today().strftime("%d/%m/%Y")), unsafe_allow_html=True)

if __name__ == "__main__":
    main()