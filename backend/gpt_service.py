import openai
import os
from dotenv import load_dotenv
import json
from typing import Dict, List, Any
from datetime import datetime

load_dotenv()

class GPTService:
    def __init__(self):
        """Inicializa el servicio de ChatGPT con la API key"""
        api_key = os.getenv('OPENAI_API_KEY')
        if api_key:
            print(f"API Key encontrada: {api_key[:10]}...")
            try:
                # Versi√≥n simplificada sin par√°metros problem√°ticos
                self.client = openai.OpenAI(
                    api_key=api_key
                )
                self.model = "gpt-3.5-turbo"  # Modelo m√°s estable y econ√≥mico
                print("‚úÖ Cliente OpenAI inicializado correctamente")
            except Exception as e:
                print(f"‚ùå Error inicializando OpenAI: {e}")
                self.client = None
                self.model = None
        else:
            print("‚ùå NO se encontr√≥ API Key en las variables de entorno")
            self.client = None
            self.model = None
        
    def analyze_patient_condition(self, patient, assessment_data: Dict) -> str:
        """
        Analiza la condici√≥n del paciente usando IA y las gu√≠as cl√≠nicas espa√±olas
        """
        if not self.client:
            print("‚ö†Ô∏è No hay cliente OpenAI disponible, usando an√°lisis b√°sico")
            return self._generate_basic_analysis(patient, assessment_data)
        
        try:
            print("ü§ñ Iniciando an√°lisis con IA...")
            system_prompt = self._build_system_prompt()
            user_prompt = self._build_user_prompt(patient, assessment_data)
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            analysis_result = response.choices[0].message.content
            print("‚úÖ An√°lisis IA completado correctamente")
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis IA: {e}")
            print("üîÑ Usando an√°lisis b√°sico como respaldo")
            return self._generate_basic_analysis(patient, assessment_data)
    
    def _generate_basic_analysis(self, patient, assessment_data: Dict) -> str:
        """Genera an√°lisis b√°sico sin IA cuando no hay API key"""
        print("üìã Generando an√°lisis b√°sico...")
        
        vitals = assessment_data.get('vital_signs', {})
        general = assessment_data.get('general_status', {})
        symptoms = assessment_data.get('symptoms', [])
        
        analysis = "## üîç AN√ÅLISIS CL√çNICO B√ÅSICO\n\n"
        
        # An√°lisis de signos vitales
        bp_sys = vitals.get('systolic_bp', 120)
        bp_dia = vitals.get('diastolic_bp', 80)
        hr = vitals.get('heart_rate', 70)
        temp = vitals.get('temperature', 36.5)
        spo2 = vitals.get('oxygen_saturation', 98)
        pain = vitals.get('pain_level', 0)
        
        analysis += "**Signos Vitales Evaluados:**\n"
        analysis += f"- Presi√≥n arterial: {bp_sys}/{bp_dia} mmHg "
        if bp_sys > 180 or bp_dia > 110:
            analysis += "(üö® CRISIS HIPERTENSIVA - Contactar m√©dico INMEDIATAMENTE)\n"
        elif bp_sys > 160 or bp_dia > 100:
            analysis += "(‚ö†Ô∏è HIPERTENSI√ìN SEVERA - Contactar m√©dico)\n"
        elif bp_sys > 140 or bp_dia > 90:
            analysis += "(‚ö†Ô∏è Hipertensi√≥n - Monitorizar)\n"
        elif bp_sys < 90 or bp_dia < 60:
            analysis += "(‚ö†Ô∏è HIPOTENSI√ìN - Monitorizar signos de mareo)\n"
        else:
            analysis += "(‚úÖ Normal)\n"
            
        analysis += f"- Frecuencia card√≠aca: {hr} lpm "
        if hr > 120:
            analysis += "(üö® TAQUICARDIA SEVERA - Evaluar urgente)\n"
        elif hr > 100:
            analysis += "(‚ö†Ô∏è Taquicardia - Buscar causas)\n"
        elif hr < 50:
            analysis += "(‚ö†Ô∏è BRADICARDIA - Revisar medicaci√≥n)\n"
        elif hr < 60:
            analysis += "(‚ö†Ô∏è Bradicardia leve)\n"
        else:
            analysis += "(‚úÖ Normal)\n"
            
        analysis += f"- Temperatura: {temp}¬∞C "
        if temp > 38.5:
            analysis += "(üö® FIEBRE ALTA - Buscar foco infeccioso URGENTE)\n"
        elif temp > 37.8:
            analysis += "(‚ö†Ô∏è Febr√≠cula - Monitorizar evoluci√≥n)\n"
        elif temp < 36.0:
            analysis += "(‚ö†Ô∏è Hipotermia - Medidas de calentamiento)\n"
        else:
            analysis += "(‚úÖ Normal)\n"
            
        analysis += f"- Saturaci√≥n O‚ÇÇ: {spo2}% "
        if spo2 < 90:
            analysis += "(üö® HIPOXEMIA SEVERA - Ox√≠geno INMEDIATO)\n"
        elif spo2 < 95:
            analysis += "(‚ö†Ô∏è Hipoxemia - Evaluar oxigenoterapia)\n"
        else:
            analysis += "(‚úÖ Normal)\n"
            
        analysis += f"- Nivel de dolor: {pain}/10 "
        if pain >= 8:
            analysis += "(üö® DOLOR SEVERO - Analgesia urgente)\n"
        elif pain >= 6:
            analysis += "(‚ö†Ô∏è Dolor moderado-severo - Optimizar analgesia)\n"
        elif pain >= 4:
            analysis += "(‚ö†Ô∏è Dolor moderado)\n"
        elif pain > 0:
            analysis += "(‚ö†Ô∏è Dolor leve)\n"
        else:
            analysis += "(‚úÖ Sin dolor)\n"
        
        analysis += "\n## ‚ö†Ô∏è ALERTAS Y RIESGOS DETECTADOS\n\n"
        
        alerts = []
        critical_alerts = []
        
        # Alertas cr√≠ticas
        if bp_sys > 180 or bp_dia > 110:
            critical_alerts.append("üö® CRISIS HIPERTENSIVA - Llamar m√©dico INMEDIATAMENTE")
        if hr > 120 or hr < 50:
            critical_alerts.append("üö® Frecuencia card√≠aca cr√≠tica - Evaluaci√≥n urgente")
        if temp > 38.5:
            critical_alerts.append("üö® Fiebre alta - Buscar foco infeccioso URGENTE")
        if spo2 < 90:
            critical_alerts.append("üö® Hipoxemia severa - Administrar ox√≠geno INMEDIATO")
        if pain >= 8:
            critical_alerts.append("üö® Dolor severo - Analgesia urgente requerida")
            
        # Alertas de precauci√≥n
        if bp_sys > 140 or bp_dia > 90:
            alerts.append("‚ö†Ô∏è Hipertensi√≥n - Controlar m√°s frecuentemente")
        if bp_sys < 90 or bp_dia < 60:
            alerts.append("‚ö†Ô∏è Hipotensi√≥n - Vigilar signos de mareo y ca√≠das")
        if hr > 100 and hr <= 120:
            alerts.append("‚ö†Ô∏è Taquicardia - Investigar causas (dolor, ansiedad, medicaci√≥n)")
        if temp > 37.8 and temp <= 38.5:
            alerts.append("‚ö†Ô∏è Febr√≠cula - Monitorizar evoluci√≥n cada 2-4 horas")
        if spo2 < 95 and spo2 >= 90:
            alerts.append("‚ö†Ô∏è Saturaci√≥n l√≠mite - Considerar oxigenoterapia")
        if pain >= 4 and pain < 8:
            alerts.append("‚ö†Ô∏è Dolor significativo - Revisar pauta analg√©sica")
            
        # Estado general
        mobility = general.get('mobility', 'N/A')
        if mobility == 'Inm√≥vil':
            alerts.append("‚ö†Ô∏è Paciente inm√≥vil - Riesgo √∫lceras y trombosis")
        elif mobility == 'Asistencia Total':
            alerts.append("‚ö†Ô∏è Dependencia total - Vigilar complicaciones")
            
        appetite = general.get('appetite', 'N/A')
        if appetite == 'Malo':
            alerts.append("‚ö†Ô∏è P√©rdida apetito - Riesgo desnutrici√≥n")
            
        mood = general.get('mood', 'N/A')
        if mood == 'Triste':
            alerts.append("‚ö†Ô∏è Estado √°nimo bajo - Evaluar depresi√≥n")
        elif mood == 'Agitado':
            alerts.append("‚ö†Ô∏è Agitaci√≥n - Investigar causas (dolor, infecci√≥n, medicaci√≥n)")
        elif mood == 'Ap√°tico':
            alerts.append("‚ö†Ô∏è Apat√≠a - Posible deterioro cognitivo o depresi√≥n")
            
        cognitive = general.get('cognitive_status', 'N/A')
        if cognitive == 'Confuso':
            alerts.append("‚ö†Ô∏è Confusi√≥n - Evaluar delirium, buscar causas reversibles")
        elif cognitive == 'Agitado':
            alerts.append("‚ö†Ô∏è Agitaci√≥n cognitiva - Protocolo delirium")
            
        # S√≠ntomas espec√≠ficos
        if symptoms:
            for symptom in symptoms:
                if symptom == 'Dolor tor√°cico':
                    critical_alerts.append("üö® DOLOR TOR√ÅCICO - Protocolo SCA inmediato")
                elif symptom == 'Dificultad respiratoria':
                    critical_alerts.append("üö® DISNEA - Evaluaci√≥n respiratoria urgente")
                elif symptom == 'Ca√≠das recientes':
                    critical_alerts.append("üö® CA√çDA RECIENTE - Protocolo post-ca√≠da")
                elif symptom == 'Confusi√≥n':
                    alerts.append("‚ö†Ô∏è Confusi√≥n - Evaluar delirium")
                elif symptom == 'Mareos':
                    alerts.append("‚ö†Ô∏è Mareos - Riesgo ca√≠das, revisar medicaci√≥n")
                elif symptom == 'N√°useas' or symptom == 'V√≥mitos':
                    alerts.append("‚ö†Ô∏è S√≠ntomas digestivos - Vigilar hidrataci√≥n")
        
        # Mostrar alertas
        if critical_alerts:
            analysis += "**üö® ALERTAS CR√çTICAS - ACCI√ìN INMEDIATA:**\n"
            for alert in critical_alerts:
                analysis += f"- {alert}\n"
            analysis += "\n"
            
        if alerts:
            analysis += "**‚ö†Ô∏è ALERTAS DE PRECAUCI√ìN:**\n"
            for alert in alerts:
                analysis += f"- {alert}\n"
            analysis += "\n"
        
        if not critical_alerts and not alerts:
            analysis += "- ‚úÖ No se detectan alertas cr√≠ticas en esta evaluaci√≥n\n\n"
        
        analysis += "## üìã RECOMENDACIONES ESPEC√çFICAS\n\n"
        
        recommendations = []
        
        # Recomendaciones espec√≠ficas seg√∫n hallazgos
        if critical_alerts:
            recommendations.append("üö® CONTACTAR M√âDICO O SERVICIO DE URGENCIAS INMEDIATAMENTE")
            
        if bp_sys > 160:
            recommendations.append("Revisar cumplimiento medicaci√≥n antihipertensiva")
        if hr > 100:
            recommendations.append("Descartar dolor, ansiedad, fiebre como causa de taquicardia")
        if temp > 37.8:
            recommendations.append("Hemocultivos y b√∫squeda sistem√°tica foco infeccioso")
        if pain >= 6:
            recommendations.append("Reevaluar pauta analg√©sica seg√∫n escalera OMS")
        if mobility == 'Inm√≥vil':
            recommendations.append("Cambios posturales cada 2h, colch√≥n antiescaras")
        if appetite == 'Malo':
            recommendations.append("Evaluaci√≥n nutricional y suplementos si precisa")
        if mood in ['Triste', 'Ap√°tico']:
            recommendations.append("Valoraci√≥n psicol√≥gica y actividades de estimulaci√≥n")
        if cognitive == 'Confuso':
            recommendations.append("Protocolo delirium: descartar causas reversibles")
            
        # Recomendaciones seg√∫n condiciones del paciente
        conditions = patient.get('conditions', {})
        if conditions.get('diabetes') and temp > 37.5:
            recommendations.append("Paciente diab√©tico con fiebre - Control glucemia estricto")
        if conditions.get('heart_disease') and hr > 100:
            recommendations.append("Cardiopat√≠a conocida con taquicardia - ECG y monitorizaci√≥n")
        if conditions.get('dementia') and cognitive == 'Confuso':
            recommendations.append("Demencia con confusi√≥n aguda - Buscar desencadenantes")
            
        # Recomendaciones generales
        patient_age = patient.get('age', 75)
        if patient_age > 85:
            recommendations.append("Paciente muy anciano - Vigilancia estrecha")
        if patient.get('risk_level') == 'Alto':
            recommendations.append("Paciente alto riesgo - Evaluaciones m√°s frecuentes")
            
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                analysis += f"{i}. {rec}\n"
        else:
            analysis += "- Continuar cuidados habituales seg√∫n protocolo\n"
        
        analysis += "\n## üìä PLAN DE SEGUIMIENTO\n\n"
        
        if critical_alerts:
            analysis += "- **Reevaluaci√≥n:** En 2-4 horas o seg√∫n evoluci√≥n\n"
            analysis += "- **Signos vitales:** Cada 15-30 minutos hasta estabilizaci√≥n\n"
            analysis += "- **Contacto m√©dico:** Inmediato\n"
        elif alerts:
            analysis += "- **Reevaluaci√≥n:** En 4-8 horas\n"
            analysis += "- **Signos vitales:** Cada 2-4 horas\n"
            analysis += "- **Contacto m√©dico:** En las pr√≥ximas 24 horas\n"
        else:
            analysis += "- **Reevaluaci√≥n:** En 24 horas\n"
            analysis += "- **Signos vitales:** Seg√∫n protocolo habitual\n"
            analysis += "- **Contacto m√©dico:** Si cambios significativos\n"
        
        analysis += f"\n---\n*Evaluaci√≥n generada: {datetime.now().strftime('%d/%m/%Y %H:%M')}*\n"
        analysis += "*Sistema: Asistente Geri√°trico IA v1.0*"
        
        return analysis
    
    def _build_system_prompt(self) -> str:
        """Construye el prompt del sistema con conocimientos geri√°tricos"""
        return """Eres un m√©dico especialista en geriatr√≠a que ayuda a cuidadores en residencias de ancianos en Espa√±a. 

Tu conocimiento se basa en:
- Gu√≠as de pr√°ctica cl√≠nica geri√°tricas del Sistema Nacional de Salud espa√±ol
- Protocolos de cuidados en residencias seg√∫n normativa espa√±ola
- Evaluaci√≥n de riesgos espec√≠ficos en ancianos
- Manejo de polifarmacia en geriatr√≠a (criterios Beers, STOPP/START)
- Prevenci√≥n de ca√≠das (escalas Morse, Downton)
- Cuidados paliativos geri√°tricos
- Manejo del delirium y deterioro cognitivo
- Normativa sanitaria espa√±ola vigente

INSTRUCCIONES ESPEC√çFICAS:
- Prioriza SIEMPRE la seguridad del paciente
- Identifica situaciones que requieren contacto m√©dico inmediato
- Usa terminolog√≠a m√©dica precisa pero comprensible para cuidadores
- Considera las particularidades del envejecimiento normal vs patol√≥gico
- Ten en cuenta la fragilidad y pluripatolog√≠a t√≠pica del anciano
- Sugiere medidas preventivas espec√≠ficas

RESPONDE SIEMPRE en este formato estructurado:
## üîç AN√ÅLISIS CL√çNICO DETALLADO
[Evaluaci√≥n exhaustiva de signos vitales, estado general y s√≠ntomas]

## ‚ö†Ô∏è ALERTAS Y FACTORES DE RIESGO
[Identifica riesgos inmediatos, ca√≠das, medicamentosos, etc.]

## üìã RECOMENDACIONES CL√çNICAS
[Acciones espec√≠ficas priorizadas para cuidadores]

## üö® URGENCIA M√âDICA
[Indica claramente si requiere atenci√≥n m√©dica inmediata y por qu√©]

## üìä PLAN DE SEGUIMIENTO
[Frecuencia de controles, par√°metros a monitorizar, cu√°ndo contactar m√©dico]

S√© espec√≠fico, pr√°ctico y siempre prioriza la seguridad del paciente anciano."""

    def _build_user_prompt(self, patient, assessment_data: Dict) -> str:
        """Construye el prompt del usuario con datos del paciente"""
        
        patient_info = f"""
DATOS DEL PACIENTE:
Nombre: {patient['name']}
Edad: {patient['age']} a√±os
G√©nero: {patient['gender']}
Habitaci√≥n: {patient['room']}
Nivel de riesgo conocido: {patient.get('risk_level', 'N/A')}
Nivel cognitivo previo: {patient.get('cognitive_level', 'N/A')}
Fecha de ingreso: {patient.get('admission_date', 'N/A')}

CONDICIONES M√âDICAS CONOCIDAS:
"""
        
        conditions = patient.get('conditions', {})
        active_conditions = []
        for condition, status in conditions.items():
            if status:
                active_conditions.append(condition.replace('_', ' ').title())
        
        if active_conditions:
            patient_info += "- " + "\n- ".join(active_conditions) + "\n"
        else:
            patient_info += "- No se registran condiciones m√©dicas espec√≠ficas\n"
        
        if patient.get('allergies'):
            patient_info += f"\nALERGIAS CONOCIDAS: {patient['allergies']}"
        
        if patient.get('medical_history'):
            patient_info += f"\nHISTORIAL M√âDICO RELEVANTE: {patient['medical_history']}"
            
        if patient.get('medications'):
            patient_info += f"\nMEDICACI√ìN ACTUAL: {patient['medications']}"
        
        vitals = assessment_data.get('vital_signs', {})
        general = assessment_data.get('general_status', {})
        
        evaluation_info = f"""

EVALUACI√ìN ACTUAL - {assessment_data.get('date', 'fecha no registrada')} a las {assessment_data.get('time', 'hora no registrada')}:

SIGNOS VITALES:
- Presi√≥n arterial: {vitals.get('systolic_bp', 'N/A')}/{vitals.get('diastolic_bp', 'N/A')} mmHg
- Frecuencia card√≠aca: {vitals.get('heart_rate', 'N/A')} latidos por minuto
- Temperatura corporal: {vitals.get('temperature', 'N/A')}¬∞C
- Saturaci√≥n de ox√≠geno: {vitals.get('oxygen_saturation', 'N/A')}%
- Nivel de dolor (escala 0-10): {vitals.get('pain_level', 'N/A')}

ESTADO GENERAL OBSERVADO:
- Estado de movilidad: {general.get('mobility', 'N/A')}
- Apetito: {general.get('appetite', 'N/A')}
- Calidad del sue√±o: {general.get('sleep_quality', 'N/A')}
- Estado de √°nimo: {general.get('mood', 'N/A')}
- Estado cognitivo aparente: {general.get('cognitive_status', 'N/A')}
- Control de esf√≠nteres: {general.get('continence', 'N/A')}
"""
        
        symptoms = assessment_data.get('symptoms', [])
        if symptoms:
            evaluation_info += f"\nS√çNTOMAS ESPEC√çFICOS OBSERVADOS:\n"
            for symptom in symptoms:
                evaluation_info += f"- {symptom}\n"
        else:
            evaluation_info += f"\nS√çNTOMAS ESPEC√çFICOS: No se reportan s√≠ntomas adicionales\n"
        
        observations = assessment_data.get('observations', '')
        if observations:
            evaluation_info += f"\nOBSERVACIONES ADICIONALES DEL CUIDADOR:\n{observations}\n"
        
        evaluator = assessment_data.get('evaluator', 'No especificado')
        evaluation_info += f"\nEvaluaci√≥n realizada por: {evaluator}"
        
        final_prompt = patient_info + evaluation_info + """

SOLICITUD DE AN√ÅLISIS:
Como especialista en geriatr√≠a, proporciona un an√°lisis cl√≠nico completo y detallado de este paciente anciano. Considera todos los factores de riesgo geri√°tricos, posibles interacciones y complicaciones t√≠picas de la edad avanzada. Identifica cualquier situaci√≥n que requiera atenci√≥n m√©dica inmediata y proporciona recomendaciones espec√≠ficas y pr√°cticas para el equipo de cuidadores.

Presta especial atenci√≥n a:
1. Signos vitales fuera de rango normal para la edad
2. Riesgo de ca√≠das y factores precipitantes  
3. Posible delirium o cambios cognitivos agudos
4. Signos de infecci√≥n o descompensaci√≥n
5. Necesidad de contacto m√©dico urgente
6. Medidas preventivas espec√≠ficas para este paciente
"""
        
        return final_prompt

    def check_medication_interactions(self, medications: List[str]) -> str:
        """Verifica posibles interacciones entre medicamentos"""
        if not self.client:
            return "Funci√≥n de verificaci√≥n de medicamentos requiere API key de OpenAI"
        
        try:
            prompt = f"""Analiza las siguientes medicaciones para un paciente geri√°trico y identifica:
1. Posibles interacciones medicamentosas
2. Efectos adversos espec√≠ficos en ancianos
3. Recomendaciones de monitorizaci√≥n
4. Sugerencias de optimizaci√≥n terap√©utica

Medicamentos: {', '.join(medications)}

Responde bas√°ndote en criterios Beers y STOPP/START para geriatr√≠a."""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Eres un farmac√≥logo cl√≠nico especializado en geriatr√≠a."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,
                max_tokens=1000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"Error al analizar medicamentos: {str(e)}"